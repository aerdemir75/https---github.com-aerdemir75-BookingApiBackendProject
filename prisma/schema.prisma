generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  bookings       Booking[]
  reviews        Review[]
}

model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  aboutMe        String
  listings       Property[]
}

model Property {
  id             String     @id @default(uuid())
  hostId         String
  title          String
  description    String
  location       String
  pricePerNight  Float
  bedroomCount   Int
  bathRoomCount  Int
  maxGuestCount  Int
  rating         Int
  reviews        Review[]
  bookings       Booking[]
  amenities      Amenity[]

  host Host @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hostId])
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[] // Many-to-many met Property (via impliciete tussen-tabel)
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([propertyId])
  @@index([userId])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([propertyId])
  @@index([userId])
}
